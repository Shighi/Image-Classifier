# -*- coding: utf-8 -*-
"""data_utils.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1n0gDHTlRDqxq4X49Jo6XmwMJebwQ0b5-
"""

from torchvision import datasets, transforms
from PIL import Image
import torch
import numpy as np

def get_data_transforms():
    """Get data transformations for training, validation, and testing"""
    return {
        'train': transforms.Compose([
            transforms.RandomResizedCrop(224),
            transforms.RandomHorizontalFlip(),
            transforms.ToTensor(),
            transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
        ]),
        'valid': transforms.Compose([
            transforms.Resize(256),
            transforms.CenterCrop(224),
            transforms.ToTensor(),
            transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
        ]),
        'test': transforms.Compose([
            transforms.Resize(256),
            transforms.CenterCrop(224),
            transforms.ToTensor(),
            transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
        ])
    }

def load_data(data_dir):
    """Load and prepare data loaders"""
    train_dir = data_dir + '/train'
    valid_dir = data_dir + '/valid'
    test_dir = data_dir + '/test'

    data_transforms = get_data_transforms()

    # Load datasets
    image_datasets = {
        'train': datasets.ImageFolder(train_dir, transform=data_transforms['train']),
        'valid': datasets.ImageFolder(valid_dir, transform=data_transforms['valid']),
        'test': datasets.ImageFolder(test_dir, transform=data_transforms['test'])
    }

    # Create dataloaders
    dataloaders = {
        'train': torch.utils.data.DataLoader(image_datasets['train'], batch_size=64, shuffle=True),
        'valid': torch.utils.data.DataLoader(image_datasets['valid'], batch_size=64, shuffle=False),
        'test': torch.utils.data.DataLoader(image_datasets['test'], batch_size=64, shuffle=False)
    }

    return dataloaders, image_datasets

def process_image(image_path):
    """Process image for use in prediction"""
    image = Image.open(image_path)

    preprocess = transforms.Compose([
        transforms.Resize(256),
        transforms.CenterCrop(224),
        transforms.ToTensor(),
        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
    ])

    return preprocess(image)

def predict(image_path, model, device, topk=5):
    """Predict the class of an image"""
    model.eval()
    model.to(device)

    img = process_image(image_path)
    img = img.unsqueeze(0).to(device)

    with torch.no_grad():
        output = model(img)
        ps = torch.exp(output)
        top_p, top_class = ps.topk(topk, dim=1)

    idx_to_class = {v: k for k, v in model.class_to_idx.items()}
    top_classes = [idx_to_class[i.item()] for i in top_class[0]]

    return top_p[0].cpu().numpy(), top_classes